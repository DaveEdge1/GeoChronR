L=load.lipds()
summary.plot(L)
source('~/Documents/Science/Research/GeoChronR/GeoChronR_dev/R/sourceAll.R')
L=load.lipds()
summary.plot(L)
L=run.bacon.LiPD(L)
L=ageEnsemble.to.paleoData(L)
values1=select.data(L)
L = run.BAM.LiPD(L)
ageBAM=select.data(L,"age")
plot.timeseries.lines(L$paleoData[[1]]$paleoMeasurementTable[[1]]$ageEnsemble$values,L$paleoData[[1]]$paleoMeasurementTable[[1]]$depth$values)
ageBAM=select.data(L,"age")
ageBAM$values
dim(ageBAM$values)
ageBAM=select.data(L,"ageEnsemble")
ageBAM=select.data(L)
rm()
rm
t<-seq(n)+1000 # define time axis
library(MASS)
source("/Users/julieneg/Documents/Science/Research/ProxySystemModeling/TimeAxis/coral_age_uncertainties/BAM_paper/code/R/BAM_simul.R")
# simulate correlated auto-regressive processes
# using this method: https://stats.stackexchange.com/questions/71540/how-to-simulate-two-correlated-ar1-time-series
set.seed(123)
# input parameters
burn.in<-300
n<-1000 # timeseries length
ns<-400 # ensemble size
t<-seq(n)+1000 # define time axis
rho<-0.8
rho1<-0.5
rho2<-0.7
# this simple function estimate rho after adjusting for autocorrelations
calcrho<-function(rho,rho1,rho2) {rho*(1-rho1*rho2)/sqrt((1-rho1^2)*(1-rho2^2))}
q12<-calcrho(rho,rho1,rho2)
eps<-mvrnorm(n+burn.in,mu=c(0,0),Sigma=cbind(c(1,q12),c(q12,1)))  # innovations
q12
model <- list(name= 'poisson',param=c([0.05,0.1]),ns=ns,resize=0)
c(0.05,0.1)
model <- list(name= 'poisson',param=c(0.05,0.1),ns=ns,resize=0)
bamOut=BAM_simul(x,t,ageEnsOut=TRUE,model = model)
source('~/Documents/Science/Research/GeoChronR/GeoChronR_dev/R/sourceAll.R')
bamOut=BAM_simul(x,t,ageEnsOut=TRUE,model = model)
q12<-calcrho(rho,gamma1,gamma2)
eps<-mvrnorm(n+burn.in,mu=c(0,0),Sigma=cbind(c(1,q12),c(q12,1)))  # innovations
# generate x & y processes
x<-arima.sim(list(ar=gamma1),n,innov=eps[burn.in+1:n,1],start.innov=eps[1:burn.in,1])
y<-arima.sim(list(ar=gamma2),n,innov=eps[burn.in+1:n,2],start.innov=eps[1:burn.in,2])
source("~/Documents/Science/Research/GeoChronR/GeoChronR_dev/R/BAM_simul.R")
bamOut=BAM_simul(x,t,ageEnsOut=TRUE,model = model)
x
x<-arima.sim(list(ar=gamma1),n,innov=eps[burn.in+1:n,1],start.innov=eps[1:burn.in,1])
y<-arima.sim(list(ar=gamma2),n,innov=eps[burn.in+1:n,2],start.innov=eps[1:burn.in,2])
x<-arima.sim(list(ar=gamma1),n,innov=eps[burn.in+1:n,1],start.innov=eps[1:burn.in,1])
y<-arima.sim(list(ar=gamma2),n,innov=eps[burn.in+1:n,2],start.innov=eps[1:burn.in,2])
library(MASS)
source("~/Documents/Science/Research/GeoChronR/GeoChronR_dev/R/BAM_simul.R")
# simulate correlated auto-regressive processes
# using this method: https://stats.stackexchange.com/questions/71540/how-to-simulate-two-correlated-ar1-time-series
set.seed(123)
# input parameters
burn.in<-300
n<-1000 # timeseries length
ns<-400 # ensemble size
t<-seq(n)+1000 # define time axis
rho<-0.8
gamma1<-0.5
gamma2<-0.7
calcrho<-function(rho,gamma1,gamma2) {rho*(1-gamma1*gamma2)/sqrt((1-gamma1^2)*(1-gamma2^2))}
q12<-calcrho(rho,gamma1,gamma2)
eps<-mvrnorm(n+burn.in,mu=c(0,0),Sigma=cbind(c(1,q12),c(q12,1)))  # innovations
# generate x & y processes
x<-arima.sim(list(ar=gamma1),n,innov=eps[burn.in+1:n,1],start.innov=eps[1:burn.in,1])
y<-arima.sim(list(ar=gamma2),n,innov=eps[burn.in+1:n,2],start.innov=eps[1:burn.in,2])
model <- list(name= 'poisson',param=c(0.05,0.1),ns=ns,resize=0)
# apply BAM pertubations
#run
bamOut=BAM_simul(x,t,ageEnsOut=TRUE,model = model)
dim(x)[1]
x
dim(x)[2]
dim(x)
as.array(x)
as.numeric(x)
bamOut=BAM_simul(t,t,ageEnsOut=TRUE,model = model)
dim(t)
t
X = as.matrix(x)
bamOut=BAM_simul(t,t,ageEnsOut=TRUE,model = model)
bamOut=BAM_simul(X,t,ageEnsOut=TRUE,model = model)
ae = bamOut$tp
ae = bamOut$ageEns
plot(t,x,t,y)
install.packages("ggplot2")
install.packages("ggplot2")
