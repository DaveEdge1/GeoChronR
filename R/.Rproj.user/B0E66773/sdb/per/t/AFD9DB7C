{
    "contents" : "ageEnsemble.to.paleoData = function(L,which.paleo=NA,which.pmt=NA,which.chron=NA,which.model=NA,max.ensemble.members=NA){\n  #check on the chronModel first\n  if(is.null(L$chronData)){\n    stop(\"There's no chronData in this file\")\n  }\n  \n  #initialize which.chron\n  if(is.na(which.chron)){\n    if(length(L$chronData)==1){\n      which.chron=1\n    }else{\n      which.chron=as.integer(readline(prompt = \"Which chronData do you want to pull this ensemble from? \"))\n    }\n  }\n  \n  #initialize model number\n  if(is.na(which.model)){\n    if(length(L$chronData[[which.chron]]$chronModel)==1){\n      #only one model\n      which.model=1\n    }else{\n      print(paste(\"ChronData\", which.chron, \"has\", length(L$chronData[[which.chron]]$chronModel), \"models\"))\n      which.model=as.integer(readline(prompt = \"Which chron model do you want to get the ensemble from? Enter an integer \"))\n    }\n  }\n  \n  \n  #initialize which.paleo\n  if(is.na(which.paleo)){\n    if(length(L$paleoData)==1){\n      which.paleo=1\n    }else{\n      which.paleo=as.integer(readline(prompt = \"Which paleoData do you want to put this age ensemble in? \"))\n    }\n  }\n  \n  #initialize measurement table number\n  if(is.na(which.pmt)){\n    if(length(L$paleoData[[which.paleo]]$paleoMeasurementTable)==1){\n      #only one pmt\n      which.pmt=1\n    }else{\n      print(paste(\"PaleoData\", which.paleo, \"has\", length(L$paleoData[[which.paleo]]$paleoMeasurementTable), \"measurement tables\"))\n      which.pmt=as.integer(readline(prompt = \"Which measurement table do you want to put the ensemble in? Enter an integer \"))\n    }\n  }\n  \n  #make sure the ensemble is there, with data\n  if(is.null(L$chronData[[which.chron]]$chronModel[[which.model]]$ensembleTable$ageEnsemble$values)){\n    stop(\"There doesn't seem to be in values in the ensemble table for this model (there may not be an ensembleTable, or even a model)\")\n  }\n  #grab the ensemble\n  ens=L$chronData[[which.chron]]$chronModel[[which.model]]$ensembleTable$ageEnsemble$values\n  ensDepth = L$chronData[[which.chron]]$chronModel[[which.model]]$ensembleTable$depth$values\n  #get the depth from the paleo measurement table\n  print(\"getting depth from the paleodata table...\")\n  di = getVariableIndex(L$paleoData[[which.paleo]]$paleoMeasurementTable[[which.pmt]],\"depth\",altNames = \"position\",always.choose = TRUE)\n\n  #depthTarget\n  depth = L$paleoData[[which.paleo]]$paleoMeasurementTable[[which.pmt]][[di]]$values\n  \n  #interpolate\n  library(Hmisc)\n  aei=apply(X=ens,MARGIN = 2,FUN = function(y) approxExtrap(ensDepth,y,xout=depth,na.rm=TRUE)$y)\n  \n  if(!is.na(max.ensemble.members)){\n    if(ncol(aei)>max.ensemble.members){\n      #randomly select the appropriate number of ensemble members\n      aei = aei[,sample.int(ncol(aei),size = max.ensemble.members)]\n    }\n  }\n  \n  \n  #assign into paleoMeasurementTable\n  L$paleoData[[which.paleo]]$paleoMeasurementTable[[which.pmt]]$ageEnsemble$values = aei\n  L$paleoData[[which.paleo]]$paleoMeasurementTable[[which.pmt]]$ageEnsemble$units = L$chronData[[which.chron]]$chronModel[[which.model]]$ensembleTable$ageEnsemble$units\n  L$paleoData[[which.paleo]]$paleoMeasurementTable[[which.pmt]]$ageEnsemble$fromChronData = which.chron\n  L$paleoData[[which.paleo]]$paleoMeasurementTable[[which.pmt]]$ageEnsemble$fromChronModel = which.model\n  L$paleoData[[which.paleo]]$paleoMeasurementTable[[which.pmt]]$ageEnsemble$description = paste(\"age ensemble pulled from chronData\", which.chron,\"model\",which.model,\"- fit to paleoData depth with linear interpolation\")\n  \n  \n  return(L)\n  \n  \n}\n  \n  ",
    "created" : 1470759453870.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1479530479",
    "id" : "AFD9DB7C",
    "lastKnownWriteTime" : 1470684385,
    "path" : "~/GitHub/GeoChronR-package/R/ageEnsemble.to.paleoData.R",
    "project_path" : "ageEnsemble.to.paleoData.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}